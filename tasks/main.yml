---



##
##        DEBUG OUTPUT
##



- name: "main.yml : ***** BEGIN XTOPH_DEPLOY ROLE PROCESSING *****"
  debug: msg="inventory_hostname={{ inventory_hostname }} xtoph_deploy_action={{ xtoph_deploy_action }}"

- block:

      ##
      ##        Load variables
      ##
      ##        NOTE: at first I used 'with_fileglob', the existance
      ##              of the file is optional and so no errors
      ##              are generated and I don't need ignore_errors
      ##
      ##              But I wanted to pass the top level var to
      ##              encapsulate the loaded parms.  So I use combination 
      ##              of when and lookup which now allows me to pass
      ##              multiple item parms.
      ##
      ##              It was a total PITA to find resolution to test
      ##              if item.filename exists.  Using the length filter
      ##              wound up providing the desired results.
      ##
      ##              Nice improvement over the old method
      ##
      
      
      
      - name: "main.yml : loading required configs"
        include_vars:
          name: '{{ item.varname  }}'
          file: '{{ item.filename }}'
        loop:
          - { varname: '',             filename: '../../../config/credentials.yml'  }
          - { varname: 'xtoph_config', filename: '../../../config/xtoph-config.yml' }
      
      
      
      - name: "main.yml : loading optional configs"
        include_vars:
          name: '{{ item.varname }}'
          file: '{{ item.filename }}'
        when: item.filename|length > 0
        loop:
          - { varname: 'xtoph_config_machine',   filename: '{{ lookup("fileglob","../../../config/xtoph-config-machine.yml") }}' }
          - { varname: 'xtoph_config_resource',  filename: '{{ lookup("fileglob","../../../config/xtoph-config-resource.yml") }}' }
          - { varname: 'xtoph_config_platform',  filename: '{{ lookup("fileglob","../../../config/xtoph-config-platform.yml") }}' }
          - { varname: 'xtoph_config_kickstart', filename: '{{ lookup("fileglob","../../../config/xtoph-config-kickstart.yml") }}' }
      
      
      
      - name: "main.yml : loading default configs"
        include_vars:
          name: '{{ item.varname }}'
          file: '{{ item.filename }}'
        when: item.filename|length > 0
        loop:
          - { varname: 'xtoph_default',           filename: 'xtoph-default.yml' }
          - { varname: 'xtoph_default_kickstart', filename: 'xtoph-default-kickstart.yml' }
          - { varname: 'xtoph_default_machine',   filename: 'xtoph-default-machine.yml' }
          - { varname: 'xtoph_default_resource',  filename: 'xtoph-default-resource.yml' }
          - { varname: 'xtoph_default_platform',  filename: 'xtoph-default-platform.yml' }



      ##
      ##        Start a fresh xtoph_deploy hash based on xtoph_default
      ##
      
      
      
      - name: "main.yml : copy xtoph_default => xtoph_deploy"
        set_fact:
          xtoph_deploy: "{{ xtoph_default }}"
      
      - name: "main.yml : apply custom config => xtoph_deploy"
        set_fact:
          xtoph_deploy: "{{ xtoph_deploy | combine( {item.key: item.value}, recursive=true) }}"
        loop: "{{ lookup('dict', xtoph_config | default({}) ) }}"
        when: xtoph_config is defined
      
      
      
      ##
      ##        Graft various default build profile parameters on 
      ##        to xtoph_deploy hash, these are defined in:
      ##
      ##          ./roles/xtoph_deploy/vars/xtoph-default*
      ##
      
      
      
      - name: "main.yml : graft default_machine => xtoph_deploy.machine_profile"
        set_fact:
          xtoph_deploy: "{{ xtoph_deploy | combine({'machine_profile': xtoph_default_machine[xtoph_deploy.selected_profile.machine] }, recursive=true) }}"
        when: xtoph_default_machine[xtoph_deploy.selected_profile.machine] is defined
      
      - name: "main.yml : graft default_platform profile => xtoph_deploy.platform_profile"
        set_fact:
          xtoph_deploy: "{{ xtoph_deploy | combine({'platform_profile': xtoph_default_platform[xtoph_deploy.selected_profile.platform] }, recursive=true) }}"
        when: xtoph_default_platform[xtoph_deploy.selected_profile.platform] is defined
      
      - name: "main.yml : graft default_resource => xtoph_deploy.resource_profile"
        set_fact:
          xtoph_deploy: "{{ xtoph_deploy | combine({'resource_profile': xtoph_default_resource[xtoph_deploy.selected_profile.resource] }, recursive=true) }}"
        when: xtoph_default_resource[xtoph_deploy.selected_profile.resource] is defined
      
      - name: "main.yml : graft default_kickstart profile => xtoph_deploy.kickstart_profile"
        set_fact:
          xtoph_deploy: "{{ xtoph_deploy | combine({'kickstart_profile': xtoph_default_kickstart[xtoph_deploy.selected_profile.kickstart] }, recursive=true) }}"
        when: xtoph_default_kickstart[xtoph_deploy.selected_profile.kickstart] is defined



      ##
      ##        Overwrite default build profile parameters with 
      ##        custom config values, these are defined in: 
      ##
      ##          ./configs/xtoph-config*
      ##
      
      
      
      - name: "main.yml : apply config_machine profile => xtoph_deploy.machine_profile"
        set_fact:
          xtoph_deploy: "{{ xtoph_deploy | combine({'machine_profile': {item.key: item.value}}, recursive=true) }}"
        loop: "{{ lookup('dict', xtoph_config_machine[xtoph_deploy.selected_profile.machine] | default({}) ) }}"
        when: xtoph_config_machine[xtoph_deploy.selected_profile.machine] is defined
      
      - name: "main.yml : apply config_platform profile => xtoph_deploy.platform_profile"
        set_fact:
          xtoph_deploy: "{{ xtoph_deploy | combine({'platform_profile': {item.key: item.value}}, recursive=true) }}"
        loop: "{{ lookup('dict', xtoph_config_platform[xtoph_deploy.selected_profile.platform] | default({}) ) }}"
        when: xtoph_config_platform[xtoph_deploy.selected_profile.platform] is defined
      
      - name: "main.yml : apply config_resource profile => xtoph_deploy.resource_profile"
        set_fact:
          xtoph_deploy: "{{ xtoph_deploy | combine({'resource_profile': {item.key: item.value}}, recursive=true) }}"
        loop: "{{ lookup('dict', xtoph_config_resource[xtoph_deploy.selected_profile.resource] | default({}) ) }}"
        when: xtoph_config_resource[xtoph_deploy.selected_profile.resource] is defined
      
      - name: "main.yml : apply config_kickstart profile => xtoph_deploy.kickstart_profile"
        set_fact:
          xtoph_deploy: "{{ xtoph_deploy | combine({'kickstart_profile': {item.key: item.value}}, recursive=true) }}"
        loop: "{{ lookup('dict', xtoph_config_kickstart[xtoph_deploy.selected_profile.kickstart] | default({}) ) }}"
        when: xtoph_config_kickstart[xtoph_deploy.selected_profile.kickstart] is defined
      
      
      
      ##
      ##        Copy platform_profile kickstart, storage.defaults & 
      ##        network.defaults to xtoph_deploy.machine_profile
      ##
      ##        This obviously creates some duplication of data, but
      ##        it makes life easier when coding and troubleshooting 
      ##        the various playbooks.  All the required data is
      ##        available in the various build profiles.
      ##
      ##        NOTE: ansible 2.9 does NOT provide 'list_merge' option for 
      ##              the combine() filter as later releases do.  Thus, to 
      ##              mimic the behaviour of right hash overriding the left 
      ##              hash, we use a 'when' test to determine if the key is
      ##              undefined
      ##
      ##        NOTE: when running action = 'setup' a situation arises for
      ##              the deployhost whereby the platform_profile is undefined,
      ##              thus to avoid failure we provide the default({}) empty
      ##              dictionary to the loop.  Also by using this technique
      ##              we don't have to test if the dictionaries exist
      ##              in the first place.  An empty set will have 0 elements
      ##             
      
      ## DEPRECATED 07MAR22: replaced with tiered method for setting netdev and blkdev below
      #- name: "main.yml : copy platform_profile kickstart values to machine_profile"
      #  set_fact:
      #    xtoph_deploy: "{{ xtoph_deploy | combine( {'machine_profile': {'kickstart': {item.key: item.value}}}, recursive=True ) }}"
      #  loop: "{{ lookup('dict', xtoph_deploy.platform_profile.kickstart | default({}) ) }}"
      #  when: xtoph_deploy.machine_profile.kickstart[item.key] is undefined
      
      ##
      ##        set kickstart.netdev to 1 of 3 values:
      ##            #1 h_netDEV
      ##            #2 machine_profile_kickstart.dev_hints[kickstart_profile.family].netdev, 
      ##            #3 machine_profile_kickstart.dev_hints.default.netdev
      ##
      ##        same logic applies to kickstart.blkdev
      ##            #1 h_blkDEV
      ##            #2 machine_profile_kickstart.dev_hints[kickstart_profile.family].netblk, 
      ##            #3 machine_profile_kickstart.dev_hints.default.netblk
      ##
      
      
      
      - name: "main.yml : special handling for kickstart netdev"
        set_fact:
          xtoph_deploy: "{{ xtoph_deploy | combine( {'machine_profile': {'kickstart': {'netdev': t_netdev}}}, recursive=True ) }}"
        vars:
          t_netdev:  "{{ xtoph_deploy.machine_profile.kickstart.dev_hints[xtoph_deploy.kickstart_profile.family]['netdev'] | default(xtoph_deploy.machine_profile.kickstart.dev_hints.default.netdev) }}"
        when:
          - xtoph_deploy.kickstart_profile.family is defined
          - xtoph_deploy.machine_profile.kickstart.netdev is defined and xtoph_deploy.machine_profile.kickstart.netdev == ''
          - xtoph_deploy.kickstart_profile.method != 'simple_cdrom'
      
      
      
      - name: "main.yml : special handling for kickstart blkdev"
        set_fact:
          xtoph_deploy: "{{ xtoph_deploy | combine( {'machine_profile': {'kickstart': {'blkdev': t_blkdev}}}, recursive=True ) }}"
        vars:
          t_blkdev:  "{{ xtoph_deploy.machine_profile.kickstart.dev_hints[xtoph_deploy.kickstart_profile.family]['blkdev'] | default(xtoph_deploy.machine_profile.kickstart.dev_hints.default.blkdev) }}"
        when:
          - xtoph_deploy.kickstart_profile.family is defined
          - xtoph_deploy.machine_profile.kickstart.blkdev is defined and xtoph_deploy.machine_profile.kickstart.blkdev == ''
          - xtoph_deploy.kickstart_profile.method != 'simple_cdrom'



      - name: "main.yml : (SIMPLE CDROM) special handling for kickstart iso_url, iso_nfs"
        block:
      
            - set_fact:
                xtoph_deploy: "{{ xtoph_deploy | combine( {'machine_profile': {'kickstart': {'iso_url': h_isoURL }}}, recursive=True ) }}"
      
            - set_fact:
                xtoph_deploy: "{{ xtoph_deploy | combine( {'machine_profile': {'kickstart': {'iso_nfs': '' }}}, recursive=True ) }}"
      
        when: 
          - xtoph_deploy.kickstart_profile.method is defined and xtoph_deploy.kickstart_profile.method == 'simple_cdrom'
      
      
      
      - name: "main.yml : (CDROM,NETBOOT) special handling for kickstart iso_url"
        block:
      
            - set_fact:
                xtoph_deploy: "{{ xtoph_deploy | combine( {'machine_profile': {'kickstart': {'iso_url': t_url}}}, recursive=True ) }}"
      
            - set_fact:
                xtoph_deploy: "{{ xtoph_deploy | combine( {'machine_profile': {'kickstart': {'iso_nfs': t_nfs}}}, recursive=True ) }}"
      
        vars:
          t_url: "{{ xtoph_deploy.deployhost.generated_iso.url }}/{{ xtoph_deploy.platform_profile.vm.name }}.iso"
          t_nfs: "{{ xtoph_deploy.deployhost.generated_iso.nfs }}/{{ xtoph_deploy.platform_profile.vm.name }}.iso"
        when:
          - xtoph_deploy.kickstart_profile.method is defined and xtoph_deploy.kickstart_profile.method != 'simple_cdrom'
      
      
      
      
      - name: "main.yml : copy platform_profile default storage values to machine_profile"
        set_fact:
          xtoph_deploy: "{{ xtoph_deploy | combine( {'machine_profile': {'storage': {'default': {item.key: item.value}}}}, recursive=True ) }}"
        loop: "{{ lookup('dict', xtoph_deploy.platform_profile.storage.default | default({}) ) }}"
        when: xtoph_deploy.machine_profile.storage.default[item.key] is undefined
      
      - name: "main.yml : copy platform_profile default network values to machine_profile"
        set_fact:
          xtoph_deploy: "{{ xtoph_deploy | combine( {'machine_profile': {'network': {'default': {item.key: item.value}}}}, recursive=True ) }}"
        loop: "{{ lookup('dict', xtoph_deploy.platform_profile.network.default | default({}) ) }}"
        when: xtoph_deploy.machine_profile.network.default[item.key] is undefined
      
      
      
      ##
      ##        At this point, pruning and grafting 
      ##        xtoph_deploy dictionary is complete
      ##
      ##
      ##        If xtoph_deploy.debug is 'true', 
      ##        dump the current xtoph_deploy dictionary
      ## 



      - name: "main.yml : debug"
        debug: var=xtoph_deploy
        when: xtoph_deploy.debug == true

      - set_fact:
          _xtoph_deploy_dict_processed: true


  when: _xtoph_deploy_dict_processed is undefined



##
##    ASSERTIONS    
##
##        Use ansible assert module to validate
##        config files and parameters.
##



- name: "main.yml : test common assertions (mistakes)"
  include_tasks: "common-assertions.yml"



##
##    SETUP
##
##        Run platform setup for each platform defined by 
##        xtoph_deploy.deployhost.platform
##
##        NOTE: xtoph_deploy.deployhost.platform can be a single
##              item or a list.  I use a jinja built-in template
##              filter determine if the key exists "in" the list
##



- name: "main.yml : setup deployhost (controller)"
  include_tasks: "deployer-setup.yml"
  when: 
    - xtoph_deploy_action == "setup" 

- name: "main.yml : setup deployhost with dhcp/pxe"
  include_tasks: "deployer-setup-dhcp.yml"
  when:
    - xtoph_deploy_action == "setup" 
    - xtoph_deploy.deployhost.dhcp.enable

##
##    SETUP-LIBVIRT
##
##
##    hosts: for this role application should only include 
##    libvirt platform hosts.  The included tasks are executed
##    on the remote platform node(s).
##



- name: "main.yml : setup libvirt platform hosts"
  include_tasks: "libvirt-setup.yml"
  when: 
    - xtoph_deploy_action == "setup-libvirt" 



##
##    UNDEPLOY
##
##        If action == 'undeploy' and the machine's hardware platform 
##        is platform_item.platform, include the platform_item.tasks
##



- name: "main.yml : common undeploy tasks"
  include_tasks: "common-undeploy.yml"
  when: 
    - xtoph_deploy_action == "undeploy" 


- name: "main.yml : platform specific undeploy tasks"
  include_tasks: "{{ platform_item.tasks }}"
  when: 
    - xtoph_deploy_action == "undeploy" 
    - xtoph_deploy.machine_profile.platform == platform_item.platform
  loop_control:
    loop_var: platform_item
  with_items:
    - { platform: 'libvirt',   tasks: 'libvirt-undeploy.yml'   } 
    - { platform: 'ovirt',     tasks: 'ovirt-undeploy.yml'     } 
    - { platform: 'baremetal', tasks: 'baremetal-undeploy.yml' } 



##
##    PRE-PROCESS
##
##        If action == 'preprocess' and the machine's hardware platform 
##        is platform_item.platform, include the platform_item.tasks
##



- name: "main.yml : platform deploy pre-processing"
  include_tasks: "{{ platform_item.playbook }}"
  when: 
    - xtoph_deploy_action == "preprocess" 
    - xtoph_deploy.machine_profile.platform == platform_item.platform
  loop_control:
    loop_var: platform_item
  with_items:
    - { platform: 'libvirt',   playbook: 'libvirt-deploy-preprocess.yml'   } 
    - { platform: 'ovirt',     playbook: 'ovirt-deploy-preprocess.yml'     } 
    - { platform: 'baremetal', playbook: 'baremetal-deploy-preprocess.yml' } 



- name: "main.yml : common deploy pre-processing"
  include_tasks: "common-deploy-preprocess.yml"
  when: 
    - xtoph_deploy_action == "preprocess" 



- name: "main.yml : dhcp (pxe) pre-processing"
  include_tasks: "common-dhcp-preprocess.yml"
  when: 
    - xtoph_deploy_action == "preprocess" 
    - xtoph_deploy.deployhost.dhcp.enable
    - xtoph_deploy.kickstart_profile.method   == "pxe"
    - xtoph_deploy.kickstart_profile.repo_iso is defined
    - xtoph_deploy.kickstart_profile.repo_iso != ""



##
##    DEPLOY
##
##        If action == 'deploy' and the machine's hardware platform 
##        is platform_item.platform, include the platform_item.tasks
##



- name: "main.yml : platform deploy machines"
  include_tasks: "{{ platform_item.playbook }}"
  when: 
    - xtoph_deploy_action == "deploy" 
    - xtoph_deploy.machine_profile.platform == platform_item.platform
  loop_control:
    loop_var: platform_item
  with_items:
    - { platform: 'libvirt',   playbook: 'libvirt-deploy.yml'   } 
    - { platform: 'ovirt',     playbook: 'ovirt-deploy.yml'     } 
    - { platform: 'baremetal', playbook: 'baremetal-deploy.yml' } 



##
##    MONITOR
##
##        If action == 'deploy' and the machine's hardware platform 
##        is platform_item.platform, include the platform_item.tasks
##



- name: "main.yml : platform deployment monitor of machines"
  include_tasks: "{{ platform_item.playbook }}"
  when: 
    - xtoph_deploy_action == "deploy" 
    - xtoph_deploy.machine_profile.platform == platform_item.platform
  loop_control:
    loop_var: platform_item
  with_items:
    - { platform: 'libvirt',   playbook: 'libvirt-deploy-monitor.yml'   } 
    - { platform: 'ovirt',     playbook: 'ovirt-deploy-monitor.yml'     } 
    - { platform: 'baremetal', playbook: 'baremetal-deploy-monitor.yml' } 



##
##    POST-PROCESS
##
##        If action == 'deploy' and the machine's hardware platform 
##        is platform_item.platform, include the platform_item.tasks
##



- name: "main.yml : platform deployment post-procesing of machines"
  include_tasks: "{{ platform_item.playbook }}"
  when: 
    - xtoph_deploy_action == "deploy" 
    - xtoph_deploy.machine_profile.platform == platform_item.platform
  loop_control:
    loop_var: platform_item
  with_items:
    - { platform: 'libvirt',   playbook: 'libvirt-deploy-post.yml'   } 
    - { platform: 'ovirt',     playbook: 'ovirt-deploy-post.yml'     } 
    - { platform: 'baremetal', playbook: 'baremetal-deploy-post.yml' } 



- name: "main.yml : common deployment post-processing of machines"
  include_tasks: "common-deploy-post.yml"
  when: 
    - xtoph_deploy_action == "deploy" 



- name: "main.yml : dhcp/pxe post-processing"
  include_tasks: "common-dhcp-post.yml"
  when: 
    - xtoph_deploy_action == "deploy" 
    - xtoph_deploy.deployhost.dhcp.enable
    - xtoph_deploy.kickstart_profile.method   == "pxe"
    - xtoph_deploy.kickstart_profile.repo_iso is defined
    - xtoph_deploy.kickstart_profile.repo_iso != ""



##
##    DEBUG OUTPUT
##



- name: "main.yml : ***** END XTOPH_DEPLOY ROLE PROCESSING *****"
  debug: msg="inventory_hostname={{ inventory_hostname }}  xtoph_deploy_action={{ xtoph_deploy_action }}"

