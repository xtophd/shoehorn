---



##
##        DEBUG OUTPUT
##



- name: "main.yml : ***** BEGIN XTOPH_DEPLOY ROLE PROCESSING *****"
  debug: msg="inventory_hostname={{ inventory_hostname }} xtoph_deploy_action={{ xtoph_deploy_action }}"



##
##        Load variables
##



- name: "main.yml : loading required parameters"
  include_vars:
    file: "../../../config/{{ item }}"
  loop:
    - xtoph-config.yml
    - credentials.yml

- name: "main.yml : loading default parameters"
  include_vars:
    file: "../vars/{{ item }}"
  loop:
    - defaults.yml
    - platform_profiles.yml
    - machine_profiles.yml
    - resource_profiles.yml
    - kickstart_profiles.yml

- name: "main.yml : loading optional platform customizations"
  ignore_errors: yes
  include_vars:
    file: "../../../config/xtoph-config-platform.yml"

- name: "main.yml : loading optional machine customizations"
  ignore_errors: yes
  include_vars:
    file: "../../../config/xtoph-config-machine.yml"

- name: "main.yml : loading optional resource customizations"
  ignore_errors: yes
  include_vars:
    file: "../../../config/xtoph-config-resource.yml"

- name: "main.yml : loading optional kickstart customizations"
  ignore_errors: yes
  include_vars:
    file: "../../../config/xtoph-config-kickstart.yml"



##
##        Combine variables under single dictionaries
##



- name: "main.yml : merging default and customer xtoph_deploy parameters  into single dictionary called 'xtoph_deploy'"
  set_fact:
    xtoph_deploy: "{{ xtoph_deploy | combine(xtoph_config, recursive=True) }}"

- name: "main.yml : merging default and custom platform profiles into single dictionary called 'xtoph_platform_profiles'"
  set_fact:
    xtoph_platform_profiles: "{{ xtoph_platform_profiles | combine(xtoph_config_platform, recursive=True) }}"
  when:  xtoph_config_platform is defined

- name: "main.yml : merging default and custom machine profiles into single dictionary called 'xtoph_machine_profiles'"
  set_fact:
    xtoph_machine_profiles: "{{ xtoph_machine_profiles | combine(xtoph_config_machine, recursive=True) }}"
  when:  xtoph_config_machine is defined

- name: "main.yml : merging default and custom resource profiles into single dictionary called 'xtoph_resource_profiles'"
  set_fact:
    xtoph_resource_profiles: "{{ xtoph_resource_profiles | combine(xtoph_config_resource, recursive=True) }}"
  when:  xtoph_config_resource is defined

- name: "main.yml : merging default and custom kickstart profiles into single dictionary called 'xtoph_kickstart_profiles'"
  set_fact:
    xtoph_kickstart_profiles: "{{ xtoph_kickstart_profiles | combine(xtoph_config_kickstart, recursive=True) }}"
  when:  xtoph_config_kickstart is defined



##
##        Graft specific resource, machine, platform and kickstart profiles onto xtoph_deploy
##



- name: "main.yml : graft resource_profile onto xtoph_deploy"
  set_fact:
    xtoph_deploy: "{{ xtoph_resource_profiles[xtoph_deploy.selected_profile.resource] | combine(xtoph_deploy) }}"
  when: xtoph_deploy.selected_profile.resource is defined and xtoph_deploy.selected_profile.resource != ''

- name: "main.yml : graft machine_profile onto xtoph_deploy"
  set_fact:
    xtoph_deploy: "{{ xtoph_machine_profiles[xtoph_deploy.selected_profile.machine] | combine(xtoph_deploy) }}"
  when: xtoph_deploy.selected_profile.machine is defined and xtoph_deploy.selected_profile.machine != ''

- name: "main.yml : graft platform_profile onto xtoph_deploy"
  set_fact:
    xtoph_deploy: "{{ xtoph_platform_profiles[xtoph_deploy.machine_profile.platform] | combine(xtoph_deploy) }}"
  when: xtoph_deploy.machine_profile.platform is defined and xtoph_deploy.machine_profile.platform != ''

- name: "main.yml : graft kickstart_profile onto xtoph_deploy"
  set_fact:
    xtoph_deploy: "{{ xtoph_kickstart_profiles[xtoph_deploy.selected_profile.kickstart] | combine(xtoph_deploy) }}"
  when: xtoph_deploy.selected_profile.kickstart is defined and xtoph_deploy.selected_profile.kickstart != ''



##
##        Copy platform_profile kickstart, storage.defaults & 
##        network.defaults to xtoph_deploy.machine_profile
##
##        NOTE: ansible 2.9 does NOT provide 'list_merge' option for 
##              the combine() filter as later releases do.  Thus, to 
##              mimic the behaviour of right hash overriding the left 
##              hash, we use a 'when' test to determine if the key is
##              undefined
##
##        NOTE: when running action = 'setup' a situation arises for
##              the deployhost whereby the platform_profile is undefined,
##              thus to avoid failure we provide the default({}) empty
##              dictionary to the loop.  Also by using this technique
##              we don't have to test if the dictionaries exist
##              in the first place.  An empty set will have 0 elements
##             



- name: "main.yml : copy platform_profile kickstart values to machine_profile"
  set_fact:
    xtoph_deploy: "{{ xtoph_deploy | combine( {'machine_profile': {'kickstart': {item.key: item.value}}}, recursive=True ) }}"
  loop: "{{ lookup('dict', xtoph_deploy.platform_profile.kickstart | default({}) ) }}"
  when: 
    - xtoph_deploy.machine_profile.kickstart[item.key] is undefined

- name: "main.yml : copy platform_profile default storage values to machine_profile"
  set_fact:
    xtoph_deploy: "{{ xtoph_deploy | combine( {'machine_profile': {'storage': {'default': {item.key: item.value}}}}, recursive=True ) }}"
  loop: "{{ lookup('dict', xtoph_deploy.platform_profile.storage.default | default({}) ) }}"
  when: 
    - xtoph_deploy.machine_profile.storage.default[item.key] is undefined

- name: "main.yml : copy platform_profile default network values to machine_profile"
  set_fact:
    xtoph_deploy: "{{ xtoph_deploy | combine( {'machine_profile': {'network': {'default': {item.key: item.value}}}}, recursive=True ) }}"
  loop: "{{ lookup('dict', xtoph_deploy.platform_profile.network.default | default({}) ) }}"
  when: 
    - xtoph_deploy.machine_profile.network.default[item.key] is undefined



##
##        At this point, pruning and grafting 
##        xtoph_deploy dictionary is complete
##
##
##        If xtoph_deploy.debug is 'true', 
##        dump the current xtoph_deploy dictionary
## 



- debug: var=xtoph_deploy
  when: xtoph_deploy.debug == true



##
##    SETUP
##
##        Run platform setup for each platform defined by 
##        xtoph_deploy.deployhost.platform
##
##        NOTE: xtoph_deploy.deployhost.platform can be a single
##              item or a list.  I use a jinja built-in template
##              filter determine if the key exists is "in" the list
##
##              the platform_item declares the 'platform' and the 
##              'playbook' to include if matched
##



- name: "main.yml : setup common stuff"
  include_tasks: "common-setup.yml"
  when: 
    - xtoph_deploy_action == "setup" 



- name: "main.yml : setup platform specifics"
  include_tasks: "{{ platform_item.tasks }}"
  when: 
    - xtoph_deploy_action == "setup" 
    - platform_item.platform in xtoph_deploy.deployhost.platform
  loop_control:
    loop_var: platform_item
  with_items:
    - { platform: 'libvirt',   tasks: 'libvirt-setup.yml'   } 
    - { platform: 'ovirt',     tasks: 'ovirt-setup.yml'     } 
    - { platform: 'baremetal', tasks: 'baremetal-setup.yml' } 



- name: "main.yml : setup dhcp/pxe"
  include_tasks: "common-dhcp-setup.yml"
  when:
    - xtoph_deploy_action == "setup" 
    - xtoph_deploy.deployhost.dhcp.enable



##
##    UNDEPLOY
##
##        If action == 'undeploy' and the machine's hardware platform 
##        is platform_item.platform, include the platform_item.tasks
##



- name: "main.yml : undeploy machines"
  include_tasks: "{{ platform_item.tasks }}"
  when: 
    - xtoph_deploy_action == "undeploy" 
    - xtoph_deploy.machine_profile.platform == platform_item.platform
  loop_control:
    loop_var: platform_item
  with_items:
    - { platform: 'libvirt',   tasks: 'libvirt-undeploy.yml'   } 
    - { platform: 'ovirt',     tasks: 'ovirt-undeploy.yml'     } 
    - { platform: 'baremetal', tasks: 'baremetal-undeploy.yml' } 



##
##    PRE-PROCESS
##
##        If action == 'preprocess' and the machine's hardware platform 
##        is platform_item.platform, include the platform_item.tasks
##



- name: "main.yml : platform deploy pre-processing"
  include_tasks: "{{ platform_item.playbook }}"
  when: 
    - xtoph_deploy_action == "preprocess" 
    - xtoph_deploy.machine_profile.platform == platform_item.platform
  loop_control:
    loop_var: platform_item
  with_items:
    - { platform: 'libvirt',   playbook: 'libvirt-deploy-preprocess.yml'   } 
    - { platform: 'ovirt',     playbook: 'ovirt-deploy-preprocess.yml'     } 
    - { platform: 'baremetal', playbook: 'baremetal-deploy-preprocess.yml' } 



- name: "main.yml : common deploy pre-processing"
  include_tasks: "common-deploy-preprocess.yml"
  when: 
    - xtoph_deploy_action == "preprocess" 



- name: "main.yml : dhcp (pxe) pre-processing"
  include_tasks: "common-dhcp-preprocess.yml"
  when: 
    - xtoph_deploy_action == "preprocess" 
    - xtoph_deploy.deployhost.dhcp.enable
    - xtoph_deploy.kickstart_profile.method   == "pxe"
    - xtoph_deploy.kickstart_profile.repo_iso is defined
    - xtoph_deploy.kickstart_profile.repo_iso != ""



##
##    DEPLOY
##
##        If action == 'deploy' and the machine's hardware platform 
##        is platform_item.platform, include the platform_item.tasks
##



- name: "main.yml : platform deploy machines"
  include_tasks: "{{ platform_item.playbook }}"
  when: 
    - xtoph_deploy_action == "deploy" 
    - xtoph_deploy.machine_profile.platform == platform_item.platform
  loop_control:
    loop_var: platform_item
  with_items:
    - { platform: 'libvirt',   playbook: 'libvirt-deploy.yml'   } 
    - { platform: 'ovirt',     playbook: 'ovirt-deploy.yml'     } 
    - { platform: 'baremetal', playbook: 'baremetal-deploy.yml' } 



##
##    MONITOR
##
##        If action == 'deploy' and the machine's hardware platform 
##        is platform_item.platform, include the platform_item.tasks
##



- name: "main.yml : platform deployment monitor of machines"
  include_tasks: "{{ platform_item.playbook }}"
  when: 
    - xtoph_deploy_action == "deploy" 
    - xtoph_deploy.machine_profile.platform == platform_item.platform
  loop_control:
    loop_var: platform_item
  with_items:
    - { platform: 'libvirt',   playbook: 'libvirt-deploy-monitor.yml'   } 
    - { platform: 'ovirt',     playbook: 'ovirt-deploy-monitor.yml'     } 
    - { platform: 'baremetal', playbook: 'baremetal-deploy-monitor.yml' } 



##
##    POST-PROCESS
##
##        If action == 'deploy' and the machine's hardware platform 
##        is platform_item.platform, include the platform_item.tasks
##



- name: "main.yml : platform deployment post-procesing of machines"
  include_tasks: "{{ platform_item.playbook }}"
  when: 
    - xtoph_deploy_action == "deploy" 
    - xtoph_deploy.machine_profile.platform == platform_item.platform
  loop_control:
    loop_var: platform_item
  with_items:
    - { platform: 'libvirt',   playbook: 'libvirt-deploy-post.yml'   } 
    - { platform: 'ovirt',     playbook: 'ovirt-deploy-post.yml'     } 
    - { platform: 'baremetal', playbook: 'baremetal-deploy-post.yml' } 



- name: "main.yml : common deployment post-processing of machines"
  include_tasks: "common-deploy-post.yml"
  when: 
    - xtoph_deploy_action == "deploy" 



- name: "main.yml : dhcp/pxe post-processing"
  include_tasks: "common-dhcp-post.yml"
  when: 
    - xtoph_deploy_action == "deploy" 
    - xtoph_deploy.deployhost.dhcp.enable
    - xtoph_deploy.kickstart_profile.method   == "pxe"
    - xtoph_deploy.kickstart_profile.repo_iso is defined
    - xtoph_deploy.kickstart_profile.repo_iso != ""



##
##    DEBUG OUTPUT
##



- name: "main.yml : ***** END XTOPH_DEPLOY ROLE PROCESSING *****"
  debug: msg="inventory_hostname={{ inventory_hostname }}  xtoph_deploy_action={{ xtoph_deploy_action }}"

