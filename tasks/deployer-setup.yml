## Authors: 
##   Christoph Doerbeck
##
## Summary:
##
##



##
##    Set up ssh keys
##



- name: "deployer-setup : create ssh directory"
  file:
    path: /root/.ssh
    mode: "0700"
    state: directory

- name: "deployer-setup : test deployhost ssh key"
  stat: path="/root/.ssh/id_rsa.pub"
  register: test_ssh_key

- name: "deployer-setup : create deployhost ssh key"
  command: "ssh-keygen -t rsa -b 2048 -N '' -f /root/.ssh/id_rsa"
  when: test_ssh_key.stat.exists == false



##
##    Install common packages
##



- name: "deployer-setup : install supporting packages (RHEL 7)"
  yum: name=genisoimage,xorriso,syslinux,git,tree,wget,yum-utils,net-tools,traceroute,nmap,python3 state=installed
  when:
    - ansible_distribution == "RedHat" or ansible_distribution == "CentOS"
    - ansible_distribution_major_version == "7"

- name: "deployer-setup : install supporting packages (RHEL 8)"
  yum: name=genisoimage,xorriso,syslinux,git,wget,yum-utils,net-tools,traceroute,nmap,python3  state=installed
  when:
    - ansible_distribution == "RedHat" or ansible_distribution == "CentOS"
    - ansible_distribution_major_version == "8"

- name: "deployer-setup : install supporting packages (RHEL 9)"
  yum: name=genisoimage,xorriso,syslinux,git,wget,yum-utils,net-tools,traceroute,nmap,python3  state=installed
  when:
    - ansible_distribution == "RedHat" or ansible_distribution == "CentOS"
    - ansible_distribution_major_version == "9"




##
##   Set up ISO directories
##



- name: "deployer-setup : create iso directory"
  file:
    path: "{{ xtoph_deploy.deployhost.iso.dir }}"
    mode: "0755"
    owner: "root"
    group: "root"
    state: directory



##
##   Enable system services
##



- name: "deployer-setup : enable system services"
  service: name="{{ item }}" state=restarted enabled=yes masked=no
  with_items:
    - "NetworkManager"


##
##   Install and enable firewalld services/ports
##



- block:

      - name: "deployer-setup : install firewalld packages"
        yum: name=firewalld state=installed

      - name: "deployer-setup : enable firewalld system service"
        service: name="firewalld" state=restarted enabled=yes masked=no

  when: xtoph_deploy.deployhost.firewalld_enable



##
##   Install and enable http services/ports
##



- block:

      - name: "deployer-setup : install http package"
        yum: name=httpd state=installed

      - name: "deployer-setup : deploy httpd configuration"
        vars:
          - p_port: "{{ xtoph_deploy.deployhost.http_port }}"
        template:
          src: "deployhost-httpd-conf.j2"
          dest: "/etc/httpd/conf/httpd.conf"
          owner: root
          group: root
          mode: 0644

      - name: "deployer-setup : selinux restorecon on /var/www/html"
        shell: restorecon -R /var/www/html

      - name: "deployer-setup : enable http system service"
        service: name="httpd" state=restarted enabled=yes masked=no

      - name: "deployer-setup : open common firewalld ports for http"
        firewalld:
          service: "{{ item }}"
          immediate: yes
          permanent: yes
          state: enabled
        with_items:
          - "http"
          - "https"
        when: 
          - xtoph_deploy.deployhost.firewalld_enable

      - name: "deployer-setup : open custom firewalld ports for http"
        firewalld:
          port: "{{ item }}"
          immediate: yes
          permanent: yes
          state: enabled
        with_items:
          - "{{ xtoph_deploy.deployhost.http_port }}/tcp"
        when: 
          - xtoph_deploy.deployhost.firewalld_enable
          -  xtoph_deploy.deployhost.http_port != "80" and xtoph_deploy.deployhost.http_port != "443"

  when: xtoph_deploy.deployhost.http_enable



##
##    Install and enable dnsmasq services/ports
##



- block:

      - name: "deployer-setup : install dnsmasq package"
        yum: name=dnsmasq state=installed

      - name: "deployer-setup : adjust /etc/dnsmasq.conf with except-interface"
        lineinfile:
          dest: "/etc/dnsmasq.conf"
          insertafter: "^#except-interface=.*$"
          line: "except-interface=virbr0"
          state: present

      - name: "deployer-setup : adjust /etc/dnsmasq.conf with bind-interfaces"
        lineinfile:
          dest: "/etc/dnsmasq.conf"
          insertafter: "^#bind-interfaces.*$"
          line: "bind-interfaces"
          state: present

      - name: "deployer-setup : disable the listen on loopback interface only config"
        replace:
          dest: "/etc/dnsmasq.conf"
          regexp: "^interface=lo"
          replace: "#interface=lo"

      - name: "deployer-setup : adjust /etc/dnsmasq.conf to forward"
        lineinfile:
          dest: "/etc/dnsmasq.conf"
          insertafter: "^#server=/localnet/.*$"
          line: "server={{ workshop_vars.network_nameserver }}"
          state:  present
        when: xtoph_deploy.deployhost.dnsmasq_override_ip | length

      - name: "deployer-setup : adjust /etc/dnsmasq.conf to resolv our local project domain"
        lineinfile:
          dest: "/etc/dnsmasq.conf"
          insertafter: "^#local=/localnet/.*$"
          line: "local=/{{ workshop_extras.network_fqdn }}/"
          state:  present

      ##
      ##    disable networkmanager from toying with /etc/resolv.conf
      ##

      - name: "deployer-setup : disable network-manager /etc/resolv.conf adjustments"
        template:
          src:   "dns-resolv-fix.j2"
          dest:  "/etc/NetworkManager/conf.d/90-dns-none.conf"
          owner: root
        when: xtoph_deploy.deployhost.dnsmasq_override_nm

      - name: "deployer-setup : restart networkmanager service"
        service: name=NetworkManager state=reloaded enabled=yes
        when: xtoph_deploy.deployhost.dnsmasq_override_nm

      - name: "ocp4-workshop : bastion-dns : template deploy resolv.conf to point to localhost"
        vars:
          - p_search:     "{{ workshop_extras.network_fqdn }}"
          - p_nameserver: "127.0.0.1"
        template:
          src:   "dns-resolv-conf.j2"
          dest:  "/etc/resolv.conf"
          owner: root
        when: xtoph_deploy.deployhost.dnsmasq_override_nm

      ##
      ##    Last couple of items:
      ##
      ##      disable nscd       dnsmasq already performs caching
      ##      firewall rules     add 'dns' to firewalld if firewalld is enabled
      ##      systemd overrides  add restart=always to dnsmasq service
      ##      service restart
      ##

      - name: "ocp4-workshop : bastion-dns : disable nscd socket and service"
        service:
          name: "{{ item }}"
          enabled: no
          state: stopped
          masked: no
        when:
          - ansible_facts['services']['nscd.service']['state'] is defined
        with_items:
          - 'nscd.socket'
          - 'nscd.service'

      - name: "deployer-setup : add dns firewalld services"
        firewalld:
          service:   "dns"
          immediate: yes
          permanent: yes
          state: enabled
        when: 
          - xtoph_deploy.deployhost.firewalld_enable

      - name: "deployer-setup : enable dnsmasq system services"
        service: name="dnsmasq" state=restarted enabled=yes masked=no


  when: xtoph_deploy.deployhost.dnsmasq_enable



##
##    Install and enable cockpit services/ports
##



- block:

      - name: "deployer-setup : install cockpit packages"
        yum: name=cockpit,cockpit-machines state=installed
        notify: restart_cockpit

      - name: "deployer-setup : enable cockpit system services"
        service: name="{{ item }}" state=started enabled=yes masked=no
        with_items:
          - "cockpit"
          - "cockpit.socket"

      - name: "deployer-setup : create cockpit systemd drop-in directory"
        file:
          path: "/etc/systemd/system/cockpit.socket.d/"
          mode: "0755"
          owner: "root"
          group: "root"
          state: directory

      - name: "deployer-setup : deploy cockpit custom configuration"
        vars:
          - p_port: "{{ xtoph_deploy.deployhost.cockpit_port }}"
        template:
          src:  "cockpit-listen-conf.j2"
          dest: "/etc/systemd/system/cockpit.socket.d/listen.conf"
          owner: root
          group: root
          mode: 0644
        register: cockpit_result
        when: xtoph_deploy.deployhost.cockpit_port != ""
        notify: restart_cockpit

      - name: "deployer-setup : add cockpit firewalld services"
        firewalld:
          service: "cockpit"
          immediate: yes
          permanent: yes
          state: enabled

      - name: "deployer-setup : add cockpit custom firewalld ports"
        firewalld:
          port: "{{ xtoph_deploy.deployhost.cockpit_port }}/tcp"
          immediate: yes
          permanent: yes
          state: enabled
        when: xtoph_deploy.deployhost.cockpit_port != ""

  when: xtoph_deploy.deployhost.cockpit_enable



##
##    NOTE: I should probably just develop a selinux
##          test to see if port needs to be added
##
##    NOTE: If we use a port not natively included
##          by default selinux profiles, we need to add it
##
##     - name: "common-ovirt-setup:  add http port to selinux http_port_t"
##     - shell:
##         cmd: |
##           semanage port -a -t http_port_t -p tcp {{ xtoph_deploy.deployhost.http_port }}




##
##    Install platform components for ovirt
##



- block:

      - name: "ovirt-setup : install oVirt SDK supporting packages (RHEL7)"
        yum: name=python-ovirt-engine-sdk4 state=installed
        when:
          - ansible_distribution == "RedHat" or ansible_distribution == "CentOS"
          - ansible_distribution_major_version == "7"
      
      - name: "ovirt-setup : install oVirt SDK supporting packages (RHEL8)"
        yum: name=python3-ovirt-engine-sdk4 state=installed
        when:
          - ansible_distribution == "RedHat" or ansible_distribution == "CentOS"
          - ansible_distribution_major_version == "8"

      - name: "ovirt-setup : install oVirt SDK supporting packages (RHEL9)"
        yum: name=python3-ovirt-engine-sdk4 state=installed
        when:
          - ansible_distribution == "RedHat" or ansible_distribution == "CentOS"
          - ansible_distribution_major_version == "9"

  when: 
    - "'ovirt' in xtoph_deploy.deployhost.platform_enable"



##
##    Install platform components for baremetal
##



- block:

      - name: "deployer-setup : install baremetal supporting packages (ipmitool)"
        yum: name=ipmitool state=installed

  when: "'baremetal' in xtoph_deploy.deployhost.platform_enable"



##
##    Install platform components for libvirt
##

  # THERE IS NOTHING TO INSTALL ON THE DEPLOYER TO ENABLE SUPPORT FOR LIBVIRT



