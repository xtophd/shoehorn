## Authors: 
##   Christoph Doerbeck
##
## Summary:
##
##    These tasks configure the "deployhost" with libvirt support
##    and install software/services to support the deployments
##



##
##    install packages that vary
##    between versions of RHEL
##



- block:

      - name: "libvirt-setup : (rhel 7) install python"
        yum: name=python state=installed

  when:
    - ansible_distribution == "RedHat"
    - ansible_distribution_major_version == "7"



- block:

      - name: "libvirt-setup : (rhel 8) install python3"
        yum: name=python3 state=installed

      - name: "libvirt-setup: (rhel 8) configure python3 alternatives"
        alternatives:
           name='python'
           link='/usr/bin/unversioned-python'
           path='/usr/bin/python3'

  when:
    - ansible_distribution == "RedHat"
    - ansible_distribution_major_version == "8"



##
##    Install additional packages
##



- name: "libvirt-setup : install libvirt supporting packages"
  yum: name=qemu-kvm,libvirt,virt-install,libvirt-client,libguestfs-tools state=installed

# 05-18-2021: MOVED TO COMMON-SETUP.YML
#- name: "libvirt-setup : install common supporting packages"
#  yum: name=genisoimage,syslinux,xorriso,git,tree,wget,yum-utils,firewalld,net-tools,traceroute,nmap state=installed



##
##    Enable requried system services
##



# 05-18-2021: MOVED TO COMMON-SETUP.YML
#- name: "libvirt-setup : enable required system services"
#  service: name="{{ item }}" state=started enabled=yes masked=no
#  with_items:
#    - "NetworkManager"
#    - "firewalld"



# 05-18-2021: MOVED TO COMMON-SETUP.YML
##
##    Set up ssh keys
##
#
#
#
#- name: "libvirt-setup : Create ssh directory"
#  file:
#    path: /root/.ssh
#    mode: "0700"
#    state: directory
#
#- name: "libvirt-setup : test deployhost ssh key"
#  stat: path="/root/.ssh/id_rsa.pub"
#  register: test_ssh_key
#
#- name: "libvirt-setup : create deployhost ssh key"
#  command: "ssh-keygen -t rsa -b 2048 -N '' -f /root/.ssh/id_rsa"
#  when: test_ssh_key.stat.exists == false


# 05-18-2021: MOVED TO COMMON-SETUP.YML
#- name: "libvirt-setup : create iso directory"
#  file:
#    path: "{{ xtoph_deploy.deployhost.iso.dir }}"
#    mode: "0755"
#    owner: "root"
#    group: "root"
#    state: directory



##
##   Set up QCOW directories
##



- name: "libvirt-setup: create qcow directory"
  file:
    path: "{{ xtoph_deploy.libvirt.storage.qcow_dir }}"
    mode: "0775"
    state: directory



# 05-18-2021: MOVED TO COMMON-SETUP.YML
##
##    Install and enable httpd services/ports
##
#
#
#
#- block:
#
#    - name: "libvirt-setup : install httpd packages"
#      yum: name=httpd state=installed
#
#    - name: "libvirt-setup : enable http system services"
#      service: name="{{ item }}" state=started enabled=yes masked=no
#      with_items:
#        - "NetworkManager"
#        - "firewalld"
#        - "httpd"
#    
#    - name: "libvirt-setup: deploy httpd configuration"
#      vars:
#        - p_port: "{{ xtoph_deploy.deployhost.http_port }}"
#      template:
#        src: "deployhost-httpd-conf.j2"
#        dest: "/etc/httpd/conf/httpd.conf"
#        owner: root
#        group: root
#        mode: 0644
#      notify: restart_httpd
#
#    - name: "libvirt-setup: selinux restorecon on /var/www/html"
#      shell: restorecon -R /var/www/html
#
#   
#    - name: "libvirt-setup : enable http/https firewalld services"
#      firewalld:
#        service: "{{ item }}"
#        immediate: yes
#        permanent: yes
#        state: enabled
#      with_items:
#        - "http"
#        - "https"
#    
#    - name: "libvirt-setup : add custom http firewalld ports"
#      firewalld:
#        port: "{{ xtoph_deploy.deployhost.http_port }}/tcp"
#        immediate: yes
#        permanent: yes
#        state: enabled
#      when: xtoph_deploy.deployhost.http_port != "80"  and
#            xtoph_deploy.deployhost.http_port != "443"



    ##
    ##    NOTES: around RHEL 8.3 there were additional
    ##           firewall zones introduced.  check and
    ##           apply same rules
    ##

    

    - name: "libvirt-setup : firewall zone check"
      script: |
          testfw-libvirt.sh "libvirt"
      register: testfw_libvirt

    - name: "libvirt-setup : enable http/https firewalld services (zone=libvirt)"
      firewalld:
        service: "{{ item }}"
        immediate: yes
        permanent: yes
        state: enabled
        zone: libvirt
      with_items:
        - "http"
        - "https"
      when: testfw_libvirt.stdout == "yes"
    
    - name: "libvirt-setup : add custom http firewalld ports (zone=libvirt)"
      firewalld:
        port: "{{ xtoph_deploy.deployhost.http_port }}/tcp"
        immediate: yes
        permanent: yes
        state: enabled
        zone: libvirt
      when: xtoph_deploy.deployhost.http_port != "80"  and
            xtoph_deploy.deployhost.http_port != "443" and
            testfw_libvirt.stdout == "yes"



    ##    NOTE: I should probably just develop a selinux 
    ##          test to see if port needs to be added  
    ##   
    ##    NOTE: If we use a port not natively included 
    ##          by default selinux profiles, we need to add it
    ##   
    ##     - name: "libvirt-setup:  add http port to selinux http_port_t"
    ##     - shell:
    ##         cmd: |
    ##           semanage port -a -t http_port_t -p tcp {{ xtoph_deploy.deployhost.http_port }}

  when: xtoph_deploy.deployhost.http_enable == true



##
##   Configure nested virtualization support
##



- block:

    - name: "libvirt-setup : nested-virt test hardware support (AMD or INTEL)"
      shell:
        cmd: |
          if grep -q 'vmx' /proc/cpuinfo ; then
            echo "intel"
          elif grep -q 'svm' /proc/cpuinfo ; then
            echo "amd"
          else
            exit 1
          fi
      register: test_virt
   
    - name: "libvirt-setup : nested-virt test if already enabled"
      when: test_virt.rc == 0
      shell:
        cmd:
          grep -q 'Y\|1' /sys/module/kvm_{{ test_virt.stdout }}/parameters/nested
      ignore_errors: yes
      register: test_nestedvirt
 
    - name: "libvirt-setup : nested-virt deploy config template"
      when: test_nestedvirt.rc != 0
      template:
        src:  nested-virt-{{ test_virt.stdout }}.j2
        dest: /etc/modprobe.d/kvm-nested.conf
        mode: 0644

    - name: "libvirt-setup : nested-virt stop libvirtd service"
      when: test_nestedvirt.rc != 0
      service:
        name: libvirtd
        state: stopped

    - name: "libvirt-setup : nested-virt reload kvm kernel module"
      when: test_nestedvirt.rc != 0
      shell:
        cmd: |
          modprobe -r kvm_{{ test_virt.stdout }}
          sleep 3
          modprobe -a kvm_{{ test_virt.stdout }}

    - name: "libvirt-setup : nested-virt restart libvirtd service"
      when: test_nestedvirt.rc != 0
      service:
        name: libvirtd
        state: started

  when: xtoph_deploy.libvirt.nested_virt_enable == true



##
##    Install and enable additional cockpit services/ports
##



- block:
  
# 05-18-2021: MOVED TO COMMON-SETUP.YML
#      - name: "libvirt-setup : install cockpit packages"
#        yum: name=cockpit,cockpit-dashboard,cockpit-machines state=installed

      - name: "libvirt-setup : install cockpit packages"
        yum: name=cockpit-machines state=installed
        notify: restart_cockpit
   
# 05-18-2021: MOVED TO COMMON-SETUP.YML
#      - name: "libvirt-setup :  enable cockpit system services"
#        service: name="{{ item }}" state=started enabled=yes masked=no
#        with_items:
#          - "cockpit"
#          - "cockpit.socket"
    
# 05-18-2021: MOVED TO COMMON-SETUP.YML
#      - name: "libvirt-setup : create cockpit systemd drop-in directory"
#        file:
#          path: "/etc/systemd/system/cockpit.socket.d/"
#          mode: "0755"
#          owner: "root"
#          group: "root"
#          state: directory
  
# 05-18-2021: MOVED TO COMMON-SETUP.YML
#      - name: "libvirt-setup : deploy cockpit custom configuration"
#        vars:
#          - p_port: "{{ kvm_cfg.cockpit_port }}"
#        template:
#          src:  "cockpit-listen-conf.j2"
#          dest: "/etc/systemd/system/cockpit.socket.d/listen.conf"
#          owner: root
#          group: root
#          mode: 0644
#        register: cockpit_result
#        when: xtoph_deploy.deployhost.cockpit_port != ""
#        notify: restart_cockpit
  
# 05-18-2021: MOVED TO COMMON-SETUP.YML
#      - name: "libvirt-setup :  add cockpit firewalld services"
#        firewalld:
#          service: "{{ item }}"
#          immediate: yes
#          permanent: yes
#          state: enabled
#        with_items:
#          - "cockpit"
    
# 05-18-2021: MOVED TO COMMON-SETUP.YML
#      - name: "libvirt-setup :  add cockpit custom firewalld ports"
#        firewalld:
#          port: "{{ kvm_cfg.cockpit_port }}/tcp"
#          immediate: yes
#          permanent: yes
#          state: enabled
#        when: xtoph_deploy.deployhost.cockpit_port != ""

  when: xtoph_deploy.deployhost.cockpit_enable == true



# 05-18-2021: MOVED TO COMMON-SETUP.YML
##
##    Install and enable dnsmasq services/ports
##
#
#
#
#- block:
#
#      - name: "libvirt-setup : install dnsmasq package"
#        yum: name=dnsmasq state=installed
#
#      - name: "libvirt-setup : adjust /etc/dnsmasq.conf with except-interface"
#        lineinfile:
#          dest: "/etc/dnsmasq.conf"
#          insertafter: "^#except-interface=.*$"
#          line: "except-interface=virbr0"
#          state: present
#
#      - name: "libvirt-setup : adjust /etc/dnsmasq.conf with bind-interfaces"
#        lineinfile:
#          dest: "/etc/dnsmasq.conf"
#          insertafter: "^#bind-interfaces.*$"
#          line: "bind-interfaces"
#          state: present
#
#      - name: "libvirt-setup :  enable dnsmasq system services"
#        service: name="dnsmasq" state=restarted enabled=yes masked=no
#
#      - name: "libvirt-setup :  add dns firewalld services"
#        firewalld:
#          service:   "dns"
#          immediate: yes
#          permanent: yes
#          state: enabled
#
#  when: xtoph_deploy.deployhost.dnsmasq_enable == true



##
##    NOTE: with the possiblity of firewalld be restarted
##          during setup, we restart libvirtd to cover
##          our bases.  this ensures firewall rules 
##          created by libvirtd are all in place
##



- name: "libvirt-setup : restart libvirtd"
  service:
    name: libvirtd
    state: restarted

