## Authors: 
##   Christoph Doerbeck
##
## Summary:
##
##    These tasks configure the "deployhost" with libvirt support
##    and install software/services to support the deployments
##



##
##    install packages that vary
##    between versions of RHEL
##



- block:

      - name: "libvirt-setup : (rhel 7) install python"
        yum: name=python state=installed

  when:
    - ansible_distribution == "RedHat"
    - ansible_distribution_major_version == "7"



- block:

      - name: "libvirt-setup : (rhel 8) install python3"
        yum: name=python3 state=installed

      - name: "libvirt-setup: (rhel 8) configure python3 alternatives"
        alternatives:
           name='python'
           link='/usr/bin/unversioned-python'
           path='/usr/bin/python3'

  when:
    - ansible_distribution == "RedHat"
    - ansible_distribution_major_version == "8"



##
##    Install additional packages
##



- name: "libvirt-setup : install libvirt supporting packages"
  yum: name=qemu-kvm,libvirt,virt-install,libvirt-client,libguestfs-tools state=installed



##
##   Set up QCOW directory for default storage
##



- name: "libvirt-setup: create default qcow directory"
  file:
    path: "{{ xtoph_platform_profiles.libvirt.platform_profile.storage.default.qcow_dir }}"
    mode: "0775"
    state: directory



##
##   Configure nested virtualization support
##



- block:

    - name: "libvirt-setup : nested-virt test hardware support (AMD or INTEL)"
      shell:
        cmd: |
          if grep -q 'vmx' /proc/cpuinfo ; then
            echo "intel"
          elif grep -q 'svm' /proc/cpuinfo ; then
            echo "amd"
          else
            exit 1
          fi
      register: test_virt
   
    - name: "libvirt-setup : nested-virt test if already enabled"
      when: test_virt.rc == 0
      shell:
        cmd:
          grep -q 'Y\|1' /sys/module/kvm_{{ test_virt.stdout }}/parameters/nested
      ignore_errors: yes
      register: test_nestedvirt
 
    - name: "libvirt-setup : nested-virt deploy config template"
      when: test_nestedvirt.rc != 0
      template:
        src:  nested-virt-{{ test_virt.stdout }}.j2
        dest: /etc/modprobe.d/kvm-nested.conf
        mode: 0644

    - name: "libvirt-setup : nested-virt stop libvirtd service"
      when: test_nestedvirt.rc != 0
      service:
        name: libvirtd
        state: stopped

    - name: "libvirt-setup : nested-virt reload kvm kernel module"
      when: test_nestedvirt.rc != 0
      shell:
        cmd: |
          modprobe -r kvm_{{ test_virt.stdout }}
          sleep 3
          modprobe -a kvm_{{ test_virt.stdout }}

    - name: "libvirt-setup : nested-virt restart libvirtd service"
      when: test_nestedvirt.rc != 0
      service:
        name: libvirtd
        state: started

  when: xtoph_platform_profiles.libvirt.platform_profile.nested_virt_enable == true



##
##    Adjust httpd firewall rules for libvirt
##



- block:



    ##
    ##    NOTES: around RHEL 8.3 there were additional
    ##           firewall zones introduced.  check and
    ##           apply same rules for libvirt zone
    ##



    - name: "libvirt-setup : firewall zone check"
      script: |
          testfw-libvirt.sh "libvirt"
      register: testfw_libvirt

    - name: "libvirt-setup : enable http/https firewalld services (zone=libvirt)"
      firewalld:
        service: "{{ item }}"
        immediate: yes
        permanent: yes
        state: enabled
        zone: libvirt
      with_items:
        - "http"
        - "https"
      when:
        - testfw_libvirt.stdout == "yes"

    - name: "libvirt-setup : add custom http firewalld ports (zone=libvirt)"
      firewalld:
        port: "{{ item }}"
        immediate: yes
        permanent: yes
        state: enabled
        zone: libvirt
      with_items:
        - "{{ xtoph_deploy.deployhost.http_port }}/tcp"
      when:
        - testfw_libvirt.stdout == "yes"
        - xtoph_deploy.deployhost.http_port != "80" and xtoph_deploy.deployhost.http_port != "443"

  when:
    - xtoph_deploy.deployhost.http_enable
    - xtoph_deploy.deployhost.firewalld_enable



##
##    Adjust cockpit installation for libvirt
##



- name: "libvirt-setup : install additional cockpit packages"
  yum: 
    name: "cockpit-machines" 
    state: "installed"
  notify: restart_cockpit
  when: xtoph_deploy.deployhost.cockpit_enable == true



##
##    NOTE: with the possiblity of firewalld be restarted
##          during setup, we restart libvirtd to cover
##          our bases.  this ensures firewall rules 
##          created by libvirtd are all in place
##



- name: "libvirt-setup : restart libvirtd"
  service:
    name: libvirtd
    state: restarted

