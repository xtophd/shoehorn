## Authors: 
##   Christoph Doerbeck
##
## Summary:
##

##
##    NOTE: deploy_node which was set in baremetal-deploy-preprocess.yml
##          only affects ipmi/bmc automation
##

- name: "baremetal-deploy : BEGIN"
  delegate_to: localhost
  block:

      ##
      ##    All tasks here are blocked and delegated 
      ##    to execute on the deployhost
      ##

      - block:
    
            ##
            ##    Transfer the ISO image to baremetal storage location
            ##
            ##    NOTE: to avoid concurrency problems with
            ##          disk space and i/o bandwidth, we
            ##          set 'throttle: 1'
            ##
          
      
            - name: "baremetal-deploy : create generated iso dir '{{ xtoph_deploy.deployhost.generated_iso.dir }}'"
              file: 
                path: "{{ xtoph_deploy.deployhost.generated_iso.dir }}"
                mode: "0755" 
                state: directory
           
            - name: "baremetal-deploy : cleanup previously generated iso image"
              file: 
                path: "{{ xtoph_deploy.deployhost.generated_iso.dir }}/{{ xtoph_deploy.platform_profile.vm.name }}.iso"
                state: absent
           
            - name: "baremetal-deploy : upload iso image"
              throttle: 1
              copy:
                src: "{{ xtoph_deploy.deployhost.tmp_dir }}/{{ xtoph_deploy.platform_profile.vm.name }}.iso"
                dest: "{{ xtoph_deploy.deployhost.generated_iso.dir }}"
          
            - name: "baremetal-deploy : clean-up temporary work-space"
              shell:
                cmd: |
                  if [[ -d "{{ xtoph_deploy.deployhost.tmp_dir }}/iso" ]] ; then
                    rm -rf "{{ xtoph_deploy.deployhost.tmp_dir }}/iso"
                  fi
         
                  if [[ -e "{{ xtoph_deploy.deployhost.tmp_dir }}/{{ xtoph_deploy.platform_profile.vm.name }}.iso" ]] ; then
                    rm -f "{{ xtoph_deploy.deployhost.tmp_dir }}/{{ xtoph_deploy.platform_profile.vm.name }}.iso"
                  fi
              when: xtoph_deploy.cleanup == true

        when: xtoph_deploy.kickstart_profile is defined and
              xtoph_deploy.kickstart_profile.method != "pxe" and
              xtoph_deploy.kickstart_profile.method != "simple_cdrom" 



      ##
      ##    Execute baremetal ipmi calls to automate installation
      ##

      - throttle: 1
        block:

            - name: "baremetal-deploy : (IPMI) config steps"
              shell:
                cmd: |
                  ipmitool -U {{ t_uid }} -P {{ t_pw }} -H {{ ipmi_fqdn }} {{ item }}
              loop:
                "{{ xtoph_deploy.machine_profile.ipmi.config_steps }}"

            - name: "baremetal-deploy : (IPMI) execute power-on"
              shell:
                cmd: |
                  ipmitool -U {{ t_uid }} -P {{ t_pw }} -H {{ ipmi_fqdn }} {{ xtoph_deploy.machine_profile.ipmi.power_on }}

        vars:
          t_uid: "{{ ipmi_credentials[ipmi_fqdn]['username'] | default(ipmi_credentials['default']['username']) }}"
          t_pw:  "{{ ipmi_credentials[ipmi_fqdn]['password'] | default(ipmi_credentials['default']['password']) }}"
        when: 
          - ipmi_fqdn is defined
          - deploy_node == true



      ##
      ##    Execute baremetal BMC calls to automate installation
      ##

      - block:

            - name: "baremetal-deploy : (BMC) debug"
              debug:
                msg: 
                  - "BMC Address         : {{ t_bmc }}"
                  - "BMC Power Status    : {{ xtoph_deploy.machine_profile.bmc.power_status }}"
                  - "BMC Power On        : {{ xtoph_deploy.machine_profile.bmc.power_on }}"
                  - "BMC Power Off       : {{ xtoph_deploy.machine_profile.bmc.power_off }}"
                  - "BMC VMedia Status   : {{ xtoph_deploy.machine_profile.bmc.media_status }}"
                  - "BMC VMedia Insert   : {{ xtoph_deploy.machine_profile.bmc.media_insert }}"
                  - "BMC VMedia Eject    : {{ xtoph_deploy.machine_profile.bmc.media_eject }}"
                  - "BMC Bootonce PXE    : {{ xtoph_deploy.machine_profile.bmc.bootonce_pxe }}"
                  - "BMC Bootonce VMedia : {{ xtoph_deploy.machine_profile.bmc.bootonce_media }}"
                  - "BMC Bootonce Clear  : {{ xtoph_deploy.machine_profile.bmc.bootonce_clear }}"
                  - "BMC VMedia URL Path : {{ t_url }}"
                  - "BMC VMedia NFS Path : {{ t_nfs }}"
                  - "BMC Custom Actions  : {{ xtoph_deploy.machine_profile.bmc.custom_actions }}"
              when:
                - xtoph_deploy.debug == true
    
            - name: "baremetal-deploy : (BMC) bootonce-clear"
              script: >
                  {{ xtoph_deploy.machine_profile.bmc.bootonce_clear }}
                  -u "{{ t_user }}" 
                  -p "{{ t_pass }}" 
                  -i "{{ t_bmc }}" 

            ##
            ##    Having vMediea inserted can affect pxe installs,
            ##    so we always clear virtual media
            ##

            - name: "baremetal-deploy-post : (BMC) media-status"
              script: >
                  {{ xtoph_deploy.machine_profile.bmc.media_status }}
                  -u "{{ t_user }}"
                  -p "{{ t_pass }}"
                  -i "{{ t_bmc }}"
                  --chomp
              register: bmc_result
    
            - name: "baremetal-deploy : (BMC) media-eject"
              script: >
                  {{ xtoph_deploy.machine_profile.bmc.media_eject }}
                  -u "{{ t_user }}"
                  -p "{{ t_pass }}"
                  -i "{{ t_bmc }}"
              when:
                - bmc_result.stdout == "inserted"
    
            - name: "baremetal-deploy : (BMC) wait for media-status = ejected"
              script: >
                  {{ xtoph_deploy.machine_profile.bmc.media_status }}
                  -u "{{ t_user }}"
                  -p "{{ t_pass }}"
                  -i "{{ t_bmc }}"
                  --chomp
              register: local_result
              until: local_result.stdout == "ejected"
              retries: 600
              delay: 5
              when:
                - bmc_result.stdout == "inserted"
    
            - name: "baremetal-deploy : (BMC) custom-actions"
              script: >
                  {{ xtoph_deploy.machine_profile.bmc.custom_actions }}
                  -u "{{ t_user }}"
                  -p "{{ t_pass }}" 
                  -i "{{ t_bmc }}" 
    
            - name: "baremetal-deploy : (BMC) media-insert"
              script: >
                  {{ xtoph_deploy.machine_profile.bmc.media_insert }}
                  -u "{{ t_user }}"
                  -p "{{ t_pass }}" 
                  -i "{{ t_bmc  }}" 
                  -m "{{ t_url  }}"
                  -n "{{ t_nfs  }}"
              register: local_result
              retries: 12
              delay: 5
              until: local_result is not failed
              when:
                - xtoph_deploy.kickstart_profile.method != "pxe"

            - name: "baremetal-deploy : (BMC) wait for media-status == inserted"
              script: >
                  {{ xtoph_deploy.machine_profile.bmc.media_status }}
                  -u "{{ t_user }}"
                  -p "{{ t_pass }}" 
                  -i "{{ t_bmc }}" 
                  --chomp
              register: targetinfo_result
              until: targetinfo_result.stdout == "inserted"
              retries: 600
              delay: 5
              when:
                - xtoph_deploy.kickstart_profile.method != "pxe"
    
    
    
            ##
            ##    NOTE: setting bootonce via redfish on dell creates
            ##          a job which needs to finish.  So hopefully 
            ##          we can just try a couple of times and it
            ##          will eventually complete
            ##
    
            - name: "baremetal-deploy : (BMC) bootonce-media"
              script: >
                  {{ xtoph_deploy.machine_profile.bmc.bootonce_media }}
                  -u "{{ t_user }}" 
                  -p "{{ t_pass }}" 
                  -i "{{ t_bmc }}" 
              register: targetinfo_result
              until: targetinfo_result.rc == 0
              retries: 12
              delay: 5
              when:
                - xtoph_deploy.kickstart_profile.method != "pxe"
    
            - name: "baremetal-deploy : (BMC) bootonce-pxe"
              script: >
                  {{ xtoph_deploy.machine_profile.bmc.bootonce_pxe }}
                  -u "{{ t_user }}" 
                  -p "{{ t_pass }}" 
                  -i "{{ t_bmc }}" 
              when:
                - xtoph_deploy.kickstart_profile.method == "pxe"



            ##
            ##    NOTE: setting bootonce via redfish on dell causes a
            ##          a power-on, thus the actual power-on could 
            ##          result in non-zero return (power already on).  
            ##          so we pause for a few seconds, test power, 
            ##          and then continue
            ##
     
            - name: "baremetal-deploy : (BMC) pause to allow bootonce set-up to complete"
              pause:
                seconds: 3
    
            - name: "baremetal-deploy : (BMC) power-status"
              script: >
                  {{ xtoph_deploy.machine_profile.bmc.power_status }}
                  -u "{{ t_user }}"
                  -p "{{ t_pass }}"
                  -i "{{ t_bmc }}"
                  --chomp
              register: bmc_result
    
            - name: "baremetal-deploy : (BMC) power-on"
              script: >
                  {{ xtoph_deploy.machine_profile.bmc.power_on }}
                  -u "{{ t_user }}" 
                  -p "{{ t_pass }}" 
                  -i "{{ t_bmc }}" 
              when: bmc_result.stdout == "off"
    
            - name: "baremetal-deploy : (BMC) wait for power-status == on"
              script: >
                  {{ xtoph_deploy.machine_profile.bmc.power_status }}
                  -u "{{ t_user }}" 
                  -p "{{ t_pass }}" 
                  -i "{{ t_bmc }}" 
                  --chomp
              register: targetinfo_result
              until: targetinfo_result.stdout == "on"
              retries: 600
              delay: 5
      
        vars:
          t_user: "{{ bmc_credentials[bmc_fqdn]['username'] | default(bmc_credentials['default']['username']) }}"
          t_pass: "{{ bmc_credentials[bmc_fqdn]['password'] | default(bmc_credentials['default']['password']) }}"
          t_bmc:  "{{ xtoph_deploy.machine_profile.bmc.fqdn }}"
          t_url:  "{{ xtoph_deploy.machine_profile.kickstart.iso_url }}"
          t_nfs:  "{{ xtoph_deploy.machine_profile.kickstart.iso_nfs }}"
        when:
          - xtoph_deploy.machine_profile.bmc.fqdn is defined
          - xtoph_deploy.machine_profile.bmc.fqdn|length > 0
          - deploy_node == true



  ##
  ## End-Of-Block
  ##

