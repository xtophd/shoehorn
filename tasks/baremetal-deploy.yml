## Authors: 
##   Christoph Doerbeck
##
## Summary:
##


- delegate_to: localhost
  block:

      ##
      ##    NOTE: All tasks here are blocked and delegated to excute
      ##          on the deployhost/localhost 
      ##


      ##
      ##    baremental deployer is still new.  At this time we
      ##    only create media which is manually loaded
      ##
    
      - set_fact:
          deploy_node: true
    


- delegate_to: localhost
  block:

      ##
      ##    All tasks here are blocked and 
      ##    delegated to excute on the deployhost
      ##    when deploy_node = true
      ##



      ##
      ##    Cleanup and create a fresh temp workspace
      ##



      - name: "baremetal-deploy : DEBUG temp workspace details"
        debug: 
          msg:
          - "temp workspace = {{ xtoph_deploy.deployhost.tmp_dir }}"
        when: xtoph_deploy.debug == true

      - name: "baremetal-deploy : delete old temp workspace"
        shell:
          cmd: |
            if [[ -d "{{ xtoph_deploy.deployhost.tmp_dir }}" ]] ; then rm -rf {{ xtoph_deploy.deployhost.tmp_dir }} ; fi
  
      - name: "baremetal-deploy : create new temp workspace"
        file:
          path="{{ xtoph_deploy.deployhost.tmp_dir }}/{{ item }}"
          mode="0755"
          state=directory
        loop:
          - iso
          - artifacts 



      - block:
  
          ##
          ##    All tasks in this block are related to
          ##    setting up the kickstart repo and ks url
          ##
          ##    * NOTE * to avoid concurrency problems when
          ##             when detecting and mounting the iso
          ##             mount, we set 'throttle = 1'
          ##

          - name: "baremetal-deploy : DEBUG repo loopback details"
            debug: 
              msg:
               - "repo mnt = {{ xtoph_deploy.deployhost.repos.dir }}/{{ xtoph_deploy.kickstart_profile.mnt }}"
               - "repo src = {{ xtoph_deploy.deployhost.iso.dir }}/{{ xtoph_deploy.kickstart_profile.repo_iso }}"
            when: xtoph_deploy.debug == true

          - name: "baremetal-deploy : stat repo mount point"
            throttle: 1
            stat: path="{{ xtoph_deploy.deployhost.repos.dir }}/{{ xtoph_deploy.kickstart_profile.mnt }}"
            register: test_repo_mount
            when: xtoph_deploy.kickstart_profile is defined and 
                  xtoph_deploy.kickstart_profile.repo_iso != ""

          - name: "baremetal-deploy : create repo mount point"
            throttle: 1
            file: 
              path:  "{{ xtoph_deploy.deployhost.repos.dir }}/{{ xtoph_deploy.kickstart_profile.mnt }}" 
              mode:  "0755"
              state: directory
            when: test_repo_mount.stat.exists == false

          - name: "baremetal-deploy : mount iso"
            throttle: 1
            vars:
            mount:
              path:   "{{ xtoph_deploy.deployhost.repos.dir }}/{{ xtoph_deploy.kickstart_profile.mnt }}"
              src:    "{{ xtoph_deploy.deployhost.iso.dir }}/{{ xtoph_deploy.kickstart_profile.repo_iso }}"
              opts:   "loop,ro"
              state:  "mounted"
              fstype: "iso9660"
            when: xtoph_deploy.kickstart_profile.repo_iso != ""


      
      ##
      ##    Create the kickstart config
      ##
      ##    NOTE: put 1 copy in http directory
      ##          and 1 on the ISO
      ##

 
 
      - name: "baremetal-deploy : test iso availability"
        stat:
          path: "{{ xtoph_deploy.deployhost.iso.dir }}/{{ xtoph_deploy.kickstart_profile.boot_iso }}"
        register: iso_result

      - fail:
          msg: "Specified ISO does not exist: {{ xtoph_deploy.deployhost.iso.dir }}/{{ xtoph_deploy.kickstart_profile.boot_iso }}"
        when: not iso_result.stat.exists
  
      - name: "baremetal-deploy : clone ISO source to temp workspace"
        vars:
          t_isofile: "{{ xtoph_deploy.deployhost.iso.dir }}/{{ xtoph_deploy.kickstart_profile.boot_iso }}"
          t_destdir: "{{ xtoph_deploy.deployhost.tmp_dir }}/iso"
        shell:
          cmd: |
            xorriso -osirrox on -indev "{{ t_isofile }}" -extract / "{{ t_destdir }}"
  
      - name: "baremetal-deploy : preserve the ISO volume id"
        vars:
          t_isofile: "{{ xtoph_deploy.deployhost.iso.dir }}/{{ xtoph_deploy.kickstart_profile.boot_iso }}"
        shell:
          cmd: |
            isoinfo -d -i {{ t_isofile }} | grep 'Volume id:' | sed -e 's/Volume id: //g'
        register: isoinfo_volume_id



      ##
      ##    Create the kickstart config
      ##
      ##    NOTE: put 1 copy in kickstart url directory
      ##          and 1 on the ISO
      ##



      - name: "baremetal-deploy : create kickstart http dir '{{ xtoph_deploy.deployhost.kickstart.dir }}'"
        file: path="{{ xtoph_deploy.deployhost.kickstart.dir }}" mode="0755" state=directory
      
      
      - name: "baremetal-deploy : deploy kickstart config iso temp workspace and http dir"
        vars:
          p_ssh_key:    "{{ lookup('file','/root/.ssh/id_rsa.pub') }}"
          p_diskDevice: "{{ xtoph_deploy.hardware_profile.disk.dev }}"
        template:
          src:   "{{ xtoph_deploy.kickstart_profile.template }}"
          dest:  "{{ item }}"
          owner: root
          group: root
          mode: 0444
        loop:
          - "{{ xtoph_deploy.deployhost.tmp_dir }}/iso/ks.cfg"
          - "{{ xtoph_deploy.deployhost.kickstart.dir }}/{{ g_clusterName }}-{{ inventory_hostname }}.cfg"



      ##
      ##    Adjust the isolinux.cfg (BIOS)
      ##
  
  
  
      - name: "baremetal-deploy : isolinux.cfg: change default timeout to 30 seconds"
        replace:
          path: "{{ xtoph_deploy.deployhost.tmp_dir }}/iso/isolinux/isolinux.cfg"
          regexp: '^timeout(\s+.*)?$'
          replace: 'timeout 30'
  
      - name: "baremetal-deploy : remove default menu option from isolinux.cfg"
        lineinfile:
          dest: "{{ xtoph_deploy.deployhost.tmp_dir }}/iso/isolinux/isolinux.cfg"
          regexp: "^.*menu default.*$"
          state:  absent
  
      - name: "baremetal-deploy : set new default menu option in isolinux.cfg"
        lineinfile:
          dest: "{{ xtoph_deploy.deployhost.tmp_dir }}/iso/isolinux/isolinux.cfg"
          insertafter: "^.*label linux.*$"
          line: "  menu default"
          state: present



      ##
      ##    Adjust the grub.cfg (UEFI)
      ##



      - name: "baremetal-deploy : grub.cfg : change default timeout to 30 seconds"
        replace:
          path: "{{ xtoph_deploy.deployhost.tmp_dir }}/iso/EFI/BOOT/grub.cfg"
          regexp: '^set timeout=.*$'
          replace: 'set timeout=30'

      - name: "baremetal-deploy : grub.cfg : change default menu option"
        replace:
          path: "{{ xtoph_deploy.deployhost.tmp_dir }}/iso/EFI/BOOT/grub.cfg"
          regexp: '^set default=.*$'
          replace: 'set default="0"'
 


      ##
      ##    NOTE:
      ##
      ##      Reference: 'man -7 dracut.cmdline', format for static ip= is as follows:
      ##
      ##        ip=<client-IP>:[<peer>]:<gateway-IP>:<netmask>:<client_hostname>:<interface>:{none|off|dhcp|on|any|dhcp6|auto6|ibft}[:[<dns1>][:<dns2>]]
      ##
      ##      Reference: http://www.freedesktop.org/wiki/Software/systemd/PredictableNetworkInterfaceNames
      ##
      ##        interface names 'enoX = onboard', 'ensX = pci-express', 'enp2s0 = physical location', 'enxYYYYYYYYYYYY = macaddress'
      ##
      ##      More discussions:
      ##
      ##        https://fedoraproject.org/wiki/Dracut/Options#Network
      ##        https://bugzilla.redhat.com/show_bug.cgi?id=836039
      ##



      - block:

          ##
          ##    All tasks in this block are related to
          ##    kernel parameter adjustments for 
          ##    the installation media
          ##
          ##    * NOTE * vars are defined once for the 
          ##             for the whole block at the end
          ##             of the block
          ##

          - name: "baremetal-deploy : isolinux.cfg : kernel args for BIOS iso (cdrom install)"
            replace:
              path:   "{{ xtoph_deploy.deployhost.tmp_dir }}/iso/isolinux/isolinux.cfg"
              regexp: '(\s+)append(\s+.*)?$'
              replace: >
                  \1append\2
                  inst.text
                  inst.ks={{ t_ks_hd }}
                  ksdevice={{ t_net_dev }} 
                  ip={{ t_net_ip }}::{{ t_net_gw }}:{{ t_net_nm }}::{{ t_net_dev }}:none
                  nameserver={{ t_net_dns }}
            when: xtoph_deploy.kickstart_profile.method == "cdrom"

          - name: "baremetal-deploy : grub.cfg : kernel args for UEFI iso (cdrom install)"
            replace:
              path: "{{ xtoph_deploy.deployhost.tmp_dir }}/iso/EFI/BOOT/grub.cfg"
              regexp: '(\s+)linuxefi(\s+.*)?$'
              replace: >
                  \1linuxefi\2 
                  inst.text
                  inst.ks={{ t_ks_hd }}
                  ksdevice={{ t_net_dev }} 
                  ip={{ t_net_ip }}::{{ t_net_gw }}:{{ t_net_nm }}::{{ t_net_dev }}:none
                  nameserver={{ t_net_dns }} 
            when: xtoph_deploy.kickstart_profile.method == "cdrom"

          - name: "baremetal-deploy : isolinux.cfg : kernel args for BIOS boot-iso (network install)"
            replace:
              path: "{{ xtoph_deploy.deployhost.tmp_dir }}/iso/isolinux/isolinux.cfg"
              regexp: '(\s+)append(\s+.*)?$'
              replace: >
                  \1append\2
                  inst.text
                  inst.ks={{ t_ks_url }}
                  inst.repo={{ t_ks_repo }}
                  ksdevice={{ t_net_dev }} 
                  ip={{ t_net_ip }}::{{ t_net_gw }}:{{ t_net_nm }}::{{ t_net_dev }}:none
                  nameserver={{ t_net_dns }}
            when: xtoph_deploy.kickstart_profile.method == "network"

          - name: "baremetal-deploy : grub.cfg : kernel args for UEFI boot-iso (network install)"
            replace:
              path: "{{ xtoph_deploy.deployhost.tmp_dir }}/iso/EFI/BOOT/grub.cfg"
              regexp: '(\s+)linuxefi(\s+.*)?$'
              replace: >
                  \1linuxefi\2 
                  inst.text
                  inst.ks={{ t_ks_url }}
                  inst.repo={{ t_ks_repo }}
                  ksdevice={{ t_net_dev }} 
                  ip={{ t_net_ip }}::{{ t_net_gw }}:{{ t_net_nm }}::{{ t_net_dev }}:none
                  nameserver={{ t_net_dns }} 
            when: xtoph_deploy.kickstart_profile.method == "network"



        vars:
          t_net_dev:  "{{ xtoph_deploy.hardware_profile.network.dev   }}"
          t_net_ip:   "{{ xtoph_deploy.baremetal.network.net0.ip      }}"
          t_net_nm:   "{{ xtoph_deploy.baremetal.network.net0.netmask }}"
          t_net_gw:   "{{ xtoph_deploy.baremetal.network.net0.gateway }}"
          t_net_dns:  "{{ xtoph_deploy.deployhost.ip if xtoph_deploy.deployhost.dnsmasq_asprimary == true else xtoph_deploy.baremetal.network.net0.nameserver }}"
          t_ks_repo:  "{{ xtoph_deploy.deployhost.repos.url }}/{{ xtoph_deploy.kickstart_profile.mnt }}"
          t_ks_hd:    "hd:LABEL={{ isoinfo_volume_id.stdout }}"
          t_ks_url:   "{{ xtoph_deploy.deployhost.kickstart.url }}/{{ g_clusterName }}-{{ inventory_hostname }}.cfg"
  
        ## End-Of-Block
  
  
  
      ##
      ##    Preserve some files in the temp workspace
      ##    artifacts directory for easy debugging
      ##


    
      - name: "baremetal-deploy : copy files to temp workspace artifacts directory for preservation"
        copy:
          dest: "{{ xtoph_deploy.deployhost.tmp_dir }}/artifacts"
          src:  "{{ item }}"
        loop:
          - "{{ xtoph_deploy.deployhost.tmp_dir }}/iso/isolinux/isolinux.cfg" 
          - "{{ xtoph_deploy.deployhost.tmp_dir }}/iso/ks.cfg" 
          - "{{ xtoph_deploy.deployhost.tmp_dir }}/iso/EFI/BOOT/grub.cfg"
       
      - name: "baremetal-deploy : save state of xtoph_deploy dictionary to artifacts directory"
        copy:
          dest:     "{{ xtoph_deploy.deployhost.tmp_dir }}/artifacts/xtoph_deploy.yml"
          content:  "{{ xtoph_deploy | to_nice_yaml }}"
         
  
  
      ##
      ##    Generate the custom ISO image
      ##



      - name: "baremetal-deploy : create script to generate iso"
        vars:
          t_iso_label:  "{{ isoinfo_volume_id.stdout }}"
          t_iso_source: "{{ xtoph_deploy.deployhost.tmp_dir }}/iso"
          t_iso_output: "{{ xtoph_deploy.deployhost.tmp_dir }}/{{ xtoph_deploy.baremetal.vm.name }}.iso"
        template:
          src: "mkiso.j2"
          dest: "{{ xtoph_deploy.deployhost.tmp_dir }}/artifacts/mkiso.sh"
          owner: root
          group: root
          mode: 0755
 
      - name: "baremetal-deploy : execute mkiso.sh script"
        shell:
          cmd: |
            {{ xtoph_deploy.deployhost.tmp_dir }}/artifacts/mkiso.sh



      ##
      ##    Transfer the ISO image to baremetal storage location
      ##
      ##    NOTE: to avoid concurrency problems with
      ##          disk space and i/o bandwidth, we
      ##          set 'throttle = 1'
      ##


      - name: "libvirt-deploy : upload iso image"
        throttle: 1
        copy:
          src: "{{ xtoph_deploy.deployhost.tmp_dir }}/{{ xtoph_deploy.baremetal.vm.name }}.iso"
          dest: "{{ xtoph_deploy.baremetal.iso.dir }}"

      - name: "libvirt-deploy : clean-up temporary work-space"
        shell:
          cmd: |
            if [[ -d "{{ xtoph_deploy.deployhost.tmp_dir }}/iso" ]] ; then
              rm -rf "{{ xtoph_deploy.deployhost.tmp_dir }}/iso"
            fi

            if [[ -e "{{ xtoph_deploy.deployhost.tmp_dir }}/{{ xtoph_deploy.baremetal.vm.name }}.iso" ]] ; then
              rm -f "{{ xtoph_deploy.deployhost.tmp_dir }}/{{ xtoph_deploy.baremetal.vm.name }}.iso"
            fi
        when: xtoph_deploy.cleanup == true



  when: deploy_node == true

  ## End-Of-Block


